Part 1:
void f1(int* A, int n)
{
  if(n <= 1) return;
  else {
    f1(A, n/2);
    // do something that takes O(1) time
    f1(A, n/2);
  }
}

k iterations
for k = 0:
	T(n) = 1 + 2T(n/2); T(0) = 1;

for k = 1:
	T(n) = 1 + 1 + 2T(n/2); T(n/2) = 2T(n/2);
	T(n) = 1 + 1 + 2(2T(n/2));
	T(n) = 1 + 1 + 4T(n/2);

for k = 2
	T(n) = 1 + 1 + 1 + 4T(n/4); T(n/4) = 2T(n/8);
	T(n) = 1 + 1 + 1 + 4(2T(n/8));
	T(n) = 1 + 1 + 1 +  8T(n/8);

for k = k
	T(n) = k + 2^k(T(n/2^k))


Part 2:

void rf2(int* data, int m, int d)
{
    if(m == 0) return;
    else if(d > 0) {
        if(*data > *(data+d)) {
            swap(*data, *(data+d));
        }
    }
    else {
        if(*data < *(data+d)) {
            swap(*data, *(data+d));
        }
    }
    rf2(data+d, m-1, d);
}

void rf1(int* data, int n, int d)
{
    if(n == 0) return;
    else {
        rf2(data, n-1, d);
        data += d*(n-2);
        rf1(data, n-1, -d);
    }
}
